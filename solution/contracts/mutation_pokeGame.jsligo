#import "./pokeGame.jsligo" "PokeGame"

#import "./unit_pokeGame.jsligo" "PokeGameTest"

// reset state

const _ = Test.reset_state(2 as nat, list([]) as list<tez>);

const faucet = Test.nth_bootstrap_account(0);

const sender1: address = Test.nth_bootstrap_account(1);

const _1 = Test.log("Sender 1 has balance : ");

const _2 = Test.log(Test.get_balance_of_address(sender1));

const _3 = Test.set_baker(faucet);

const _4 = Test.set_source(faucet);

const _tests = (
  ta: typed_address<parameter_of PokeGame, PokeGame.storage>,
  _: michelson_contract<parameter_of PokeGame, PokeGame.storage>,
  _2: int
): unit => { return PokeGameTest._testPoke(ta, sender1); };

const test_mutation =
  (
    (): unit => {
      const mutationErrorList =
        Test.originate_and_mutate_all(
          contract_of(PokeGame),
          PokeGameTest.initial_storage,
          PokeGameTest.initial_tez,
          _tests
        );
      match(mutationErrorList) {
        when ([]):
          unit
        when ([head, ..._tail]):
          do {
            Test.log(head);
            Test.assert_with_error(false, Test.to_string(head[1]))
          }
      };
    }
  )();
