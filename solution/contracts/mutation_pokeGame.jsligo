
#import "./pokeGame.jsligo" "PokeGame"
#import "./unit_pokeGame.jsligo" "PokeGameTest"

// reset state
let _ = Test.reset_state ( 2 as nat, list([]) as list <tez> );
let faucet = Test.nth_bootstrap_account(0);
let sender1 : address = Test.nth_bootstrap_account(1);
let _ = Test.log("Sender 1 has balance : ");
let _ = Test.log(Test.get_balance(sender1));

let _ = Test.set_baker(faucet);
let _ = Test.set_source(faucet);


const _tests = (main : PokeGameTest.main_fn) : bool => {
  return PokeGameTest._testPoke([main,sender1]);
};

const _test_mutation = () : bool => {

  let log = (mutations : list<[bool,mutation]>) : bool => {
    if(List.size(mutations) == (1 as nat)) {Test.log("Mutation issue found"); Test.log(Option.unopt(List.head_opt(mutations))); return false;}
    else return log(Option.unopt(List.tail_opt(mutations))); 
  };

  return match(Test.mutation_test_all(PokeGame.main,_tests) , list([
  ([] : list<[bool,mutation]>) => {Test.log("No mutation errors"); return true;},
  ([head,...tail] : list<[bool,mutation]>) => {
    if(List.size(tail) == (0 as nat)) { Test.log(head); return false;}
    else return log(tail); 
    }
  ]));
}

const test_mutation = _test_mutation(); 